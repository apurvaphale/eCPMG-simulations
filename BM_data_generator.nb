(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    121439,       2410]
NotebookOptionsPosition[     73625,       1541]
NotebookOutlinePosition[    119873,       2392]
CellTagsIndexPosition[    119830,       2389]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.909044895641675*^9, 3.909044943639219*^9, 3.9090450253036585`*^9, {
   3.909045072843382*^9, 3.909045166749202*^9}, {3.9090452347401466`*^9, 
   3.9090453045440073`*^9}, {3.9090454564885483`*^9, 3.909045493937355*^9}, {
   3.9090455556486964`*^9, 3.9090457042957745`*^9}, {3.909045741960164*^9, 
   3.909045744805433*^9}, {3.9090458056109524`*^9, 3.9090458551691704`*^9}, {
   3.9090459159655457`*^9, 3.9090459206099234`*^9}, {3.9090463089438157`*^9, 
   3.9090463902839303`*^9}, {3.909046423544982*^9, 3.9090464398626146`*^9}, {
   3.909046483913501*^9, 3.909046707852648*^9}, {3.9090467391627846`*^9, 
   3.9090467506644425`*^9}, {3.909046812514165*^9, 3.90904687429938*^9}, {
   3.9090469064270287`*^9, 3.9090470016220884`*^9}, {3.909047136169709*^9, 
   3.909047273766824*^9}, {3.909047308488495*^9, 3.9090473099426675`*^9}, {
   3.909047834018303*^9, 3.909047834752573*^9}, {3.9090523684415045`*^9, 
   3.909052391310543*^9}, {3.9090525104076567`*^9, 3.909052511454253*^9}, {
   3.9090526414864683`*^9, 3.909052704172802*^9}, {3.9090531248750443`*^9, 
   3.909053126296545*^9}, 3.909053681645663*^9, 3.9090541384997516`*^9, 
   3.9090541694311275`*^9, 3.90905500965069*^9, {3.9090551168145723`*^9, 
   3.9090551364309425`*^9}, {3.9090552263517237`*^9, 3.9090552267575593`*^9}, 
   3.909055461186139*^9, {3.9091207893741245`*^9, 3.909120805016075*^9}, {
   3.9091209097501287`*^9, 3.909120910109414*^9}, {3.9091210838470707`*^9, 
   3.909121084831402*^9}, {3.909207683360087*^9, 3.909207709920051*^9}, {
   3.909208986085867*^9, 3.9092089865110855`*^9}, 3.9092091543045416`*^9, 
   3.909279186094964*^9, {3.9092797958039293`*^9, 3.9092797961788826`*^9}, 
   3.909290794779577*^9, 3.9092908686822853`*^9, 3.90929153557539*^9, {
   3.909291946283845*^9, 3.909291952065892*^9}, 3.9092919874208794`*^9, {
   3.909292041962175*^9, 3.9092920441819344`*^9}, {3.909292087883567*^9, 
   3.909292091212433*^9}, {3.9092921591524296`*^9, 3.9092923805762634`*^9}, 
   3.909292413413822*^9, 3.9092925594597387`*^9},
 CellLabel->
  "In[175]:=",ExpressionUUID->"ccb65b70-b61e-4455-8d0a-d89759e5eb1d"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"currentDirectory", "=", 
     RowBox[{"NotebookDirectory", "[", "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"R20800", "=", "25"}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{
    "can", " ", "be", " ", "changed", " ", "based", " ", "on", " ", 
     "experimental", " ", "inputs"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"R20600", "=", "20"}], ";"}], 
   RowBox[{"(*", 
    RowBox[{
    "can", " ", "be", " ", "changed", " ", "based", " ", "on", " ", 
     "experimental", " ", "inputs"}], "*)"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"lit", " ", "of", " ", "kex", " ", "in", " ", "s"}], "-", 
     RowBox[{"1", " ", "values", " ", "to", " ", "be", " ", "simulated"}]}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"kexsim", "=", 
     RowBox[{"{", "10000", "}"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"NUCPMG", " ", "frequencies"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Nu]", "=", 
     RowBox[{"{", 
      RowBox[{
      "100", ",", "500", ",", "1000", ",", "2000", ",", "3000", ",", "4000", 
       ",", "5000", ",", "6000", ",", "7000", ",", "8000", ",", "9000", ",", 
       "10000", ",", "11000", ",", "12000", ",", "13000", ",", "14000", ",", 
       "15000", ",", "16000", ",", "17000", ",", "18000", ",", "19000", ",", 
       "20000", ",", "21000", ",", "22000", ",", "23000", ",", "24000", ",", 
       "25000", ",", "26000", ",", "27000", ",", "28000", ",", "29000", ",", 
       "30000"}], "}"}]}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{
    "for", " ", "linear", " ", "scheme", " ", "of", " ", "nucpmg", " ", 
     "points"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"v", " ", "=", " ", "100"}], ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{"mag", " ", "field"}], "*)"}], 
   RowBox[{"(*", 
    RowBox[{
    "change", " ", "it", " ", "for", " ", "N", " ", "or", " ", "depending", 
     " ", "on", " ", "your", " ", "magnets"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"field800", "=", "800"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"field600", "=", "600"}], ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "population", " ", "of", " ", "state", " ", "B", " ", "for", " ", 
      "simulation"}], ",", " ", 
     RowBox[{"max", " ", "is", " ", "1"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"pBsim", "=", 
     RowBox[{"{", "0.05", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "csd", " ", "to", " ", "be", " ", "simulatied", " ", "in", " ", "ppm"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"csdsim", "=", 
     RowBox[{"{", "0.5", "}"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"err600sim", "=", "0.6"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"err800sim", "=", "0.8"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "number", " ", "of", " ", "replicas", " ", "to", " ", "run", " ", "with", 
     " ", "diffent", " ", "stocahstic", " ", "errors"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"rep", " ", "=", " ", "1"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"R2val800", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"R2val600", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"kexValue", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"kABValue", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"kBAValue", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"pfValue", " ", "=", " ", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"Do", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"replica", " ", "=", 
       RowBox[{"rep", "[", 
        RowBox[{"[", "l", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", " ", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"csdx", " ", "=", " ", 
          RowBox[{"csdsim", "[", 
           RowBox[{"[", "k", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Do", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"pBx", " ", "=", " ", 
             RowBox[{"pBsim", "[", 
              RowBox[{"[", "j", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"Print", "[", "pBx", "]"}], ";"}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"Do", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"kAB", "=", 
                RowBox[{
                 RowBox[{"kexsim", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "*", 
                 RowBox[{"(", 
                  RowBox[{"1", "-", "pBx"}], ")"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"kBA", "=", 
                RowBox[{
                 RowBox[{"kexsim", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "*", "pBx"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"pf", " ", "=", " ", 
                RowBox[{"pBx", "*", 
                 RowBox[{"(", 
                  RowBox[{"1", "-", "pBx"}], ")"}], "*", "4", "*", 
                 RowBox[{"\[Pi]", "^", "2"}], "*", "csdx", "*", "csdx"}]}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"Print", "[", "pf", "]"}], ";"}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"pfValue", ",", "pf"}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"kexValue", ",", 
                 RowBox[{"kexsim", "[", 
                  RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"kABValue", ",", "kAB"}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"kBAValue", ",", "kBA"}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"simKexBM", ",", 
                 RowBox[{"{", 
                  RowBox[{"csdx", ",", "pBx", ",", 
                   RowBox[{"kexsim", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "pf", ",", "kAB", 
                   ",", "kBA"}], "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"i", ",", 
                RowBox[{"Length", "[", "kexsim", "]"}]}], "}"}]}], "]"}]}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", 
             RowBox[{"Length", "[", "pBsim", "]"}]}], "}"}]}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", 
          RowBox[{"Length", "[", "csdsim", "]"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\n", 
      RowBox[{"subfolder", "=", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{"currentDirectory", ",", 
          RowBox[{"ToString", "[", "replica", "]"}]}], "}"}], "]"}]}], ";", 
      "\n", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"DirectoryQ", "[", "subfolder", "]"}]}], ",", 
        RowBox[{"CreateDirectory", "[", "subfolder", "]"}]}], "]"}], ";", 
      "\n", "\[IndentingNewLine]", 
      RowBox[{"filename", "=", 
       RowBox[{"\"\<BM_datagen_kex_pf_kAB_kBA4_\>\"", "<>", 
        RowBox[{"ToString", "[", "replica", "]"}], "<>", "\"\<.csv\>\""}]}], 
      ";", "\n", 
      RowBox[{"filepath", "=", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{"subfolder", ",", "filename"}], "}"}], "]"}]}], ";"}], "\n", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Export", "[", 
       RowBox[{"filepath", ",", "simKexBM", ",", "\"\<CSV\>\"", ",", 
        RowBox[{"\"\<TableHeadings\>\"", "->", "None"}]}], "]"}], "*)"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"l", ",", 
       RowBox[{"Length", "[", "rep", "]"}]}], "}"}]}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"simKexBM", ";"}], "\[IndentingNewLine]", 
   RowBox[{"kexValue", ";"}], "\n", 
   RowBox[{"kABValue", ";"}], "\n", 
   RowBox[{"kBAValue", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{
  3.909044895641675*^9, 3.909044943639219*^9, 3.9090450253036585`*^9, {
   3.909045072843382*^9, 3.909045166749202*^9}, {3.9090452347401466`*^9, 
   3.9090453045440073`*^9}, {3.9090454564885483`*^9, 3.909045493937355*^9}, {
   3.9090455556486964`*^9, 3.9090457042957745`*^9}, {3.909045741960164*^9, 
   3.909045744805433*^9}, {3.9090458056109524`*^9, 3.9090458551691704`*^9}, {
   3.9090459159655457`*^9, 3.9090459206099234`*^9}, {3.9090463089438157`*^9, 
   3.9090463902839303`*^9}, {3.909046423544982*^9, 3.9090464398626146`*^9}, {
   3.909046483913501*^9, 3.909046707852648*^9}, {3.9090467391627846`*^9, 
   3.9090467506644425`*^9}, {3.909046812514165*^9, 3.90904687429938*^9}, {
   3.9090469064270287`*^9, 3.9090470016220884`*^9}, {3.909047136169709*^9, 
   3.909047273766824*^9}, {3.909047308488495*^9, 3.9090473099426675`*^9}, {
   3.909047834018303*^9, 3.909047834752573*^9}, {3.9090523684415045`*^9, 
   3.909052391310543*^9}, {3.9090525104076567`*^9, 3.909052511454253*^9}, {
   3.9090526414864683`*^9, 3.909052704172802*^9}, {3.9090531248750443`*^9, 
   3.909053126296545*^9}, 3.909053681645663*^9, 3.9090541384997516`*^9, 
   3.9090541694311275`*^9, 3.90905500965069*^9, {3.9090551168145723`*^9, 
   3.9090551364309425`*^9}, {3.9090552263517237`*^9, 3.9090552267575593`*^9}, 
   3.909055461186139*^9, {3.9091207893741245`*^9, 3.909120805016075*^9}, {
   3.9091209097501287`*^9, 3.909120910109414*^9}, {3.9091210838470707`*^9, 
   3.909121084831402*^9}, {3.909207683360087*^9, 3.909207709920051*^9}, {
   3.909208986085867*^9, 3.9092089865110855`*^9}, 3.9092091543045416`*^9, 
   3.909279186094964*^9, {3.9092797958039293`*^9, 3.9092797961788826`*^9}, 
   3.909290794779577*^9, 3.9092908686822853`*^9, 3.90929153557539*^9, {
   3.909291946283845*^9, 3.909291952065892*^9}, 3.9092919874208794`*^9, {
   3.909292041962175*^9, 3.9092920441819344`*^9}, {3.909292087883567*^9, 
   3.909292091212433*^9}, {3.9092921591524296`*^9, 3.9092923805762634`*^9}, {
   3.909292413413822*^9, 3.9092925105582*^9}, 3.9092925454387817`*^9, {
   3.9092930677271338`*^9, 3.9092930882977085`*^9}, {3.9092931728372335`*^9, 
   3.9092932284977694`*^9}, 3.9092933497922473`*^9, 3.909293915753517*^9, 
   3.9092939717288456`*^9, {3.9092942140718937`*^9, 3.90929429450937*^9}, {
   3.9092943374354057`*^9, 3.9092945676175857`*^9}, {3.909294935525417*^9, 
   3.909294935744666*^9}, {3.9092950652453575`*^9, 3.909295076280523*^9}, {
   3.9092965530483985`*^9, 3.90929656835102*^9}, {3.9093058895231233`*^9, 
   3.909305893281611*^9}, {3.909309037551654*^9, 3.909309040494027*^9}, {
   3.909323978998938*^9, 3.909324043784292*^9}, {3.9093242306102457`*^9, 
   3.9093242522110577`*^9}, 3.9093261236373415`*^9, {3.909451948741247*^9, 
   3.9094519506404176`*^9}, {3.909454179663309*^9, 3.9094541928536234`*^9}, {
   3.9094542277504797`*^9, 3.9094542280938635`*^9}, 3.909454264882104*^9, {
   3.9094577230354404`*^9, 3.9094577902554197`*^9}, {3.9094578223611236`*^9, 
   3.909457850977573*^9}, {3.9094579394350586`*^9, 3.9094579741276875`*^9}, {
   3.9094584902244406`*^9, 3.9094586449443507`*^9}, {3.909458698504945*^9, 
   3.909458704851308*^9}, {3.9094596616793566`*^9, 3.9094596759513254`*^9}, 
   3.9094597147177563`*^9, {3.909459805888093*^9, 3.9094598123426886`*^9}, {
   3.9094602968752337`*^9, 3.909460305831015*^9}, {3.909462349301919*^9, 
   3.9094623508963537`*^9}, {3.9094638991178303`*^9, 
   3.9094638996177297`*^9}, {3.909464232226454*^9, 3.909464237007701*^9}, {
   3.909464543229656*^9, 3.909464546623088*^9}, {3.909473711592408*^9, 
   3.9094738085414057`*^9}, {3.909473840490512*^9, 3.909473885481619*^9}, 
   3.909479291999135*^9, 3.909480860950777*^9, {3.9094867583618183`*^9, 
   3.9094867923504457`*^9}, 3.9094868497636766`*^9, 3.909489404749854*^9, {
   3.9095509518194313`*^9, 3.909551147165394*^9}, {3.9095511927410192`*^9, 
   3.9095511951001143`*^9}, {3.9095515491621666`*^9, 3.909551550799157*^9}, {
   3.909552217121654*^9, 3.90955222132292*^9}, {3.909552301279648*^9, 
   3.9095523334063754`*^9}, 3.909552390570527*^9, {3.9098399127568207`*^9, 
   3.9098399246842175`*^9}, {3.9098402389740763`*^9, 
   3.9098402460861764`*^9}, {3.9098410362868795`*^9, 
   3.9098411458703136`*^9}, {3.9100751544495587`*^9, 3.91007528348802*^9}, 
   3.9100755001826267`*^9, {3.9100759921975503`*^9, 3.9100759941033325`*^9}, {
   3.910076034954529*^9, 3.9100760363614807`*^9}, 3.9102345275998707`*^9, 
   3.910234605441601*^9, {3.910234638663834*^9, 3.9102346929268436`*^9}, {
   3.9102347728585453`*^9, 3.9102348170718565`*^9}, 3.910235035203868*^9, 
   3.910235072490526*^9, {3.910235161262319*^9, 3.9102351923334265`*^9}, {
   3.9102358835400047`*^9, 3.91023596666626*^9}, {3.910236015779867*^9, 
   3.9102361032126975`*^9}, {3.9131910629389954`*^9, 3.913191082244088*^9}, {
   3.913191162229146*^9, 3.913191170375493*^9}, {3.913191215884739*^9, 
   3.913191248897408*^9}, {3.917769589173256*^9, 3.9177696174505396`*^9}, {
   3.9177697055877666`*^9, 3.9177697198957767`*^9}, {3.917769771454261*^9, 
   3.917769772200691*^9}, {3.917769806608901*^9, 3.9177698965346203`*^9}, {
   3.9177699463814397`*^9, 3.917769951478554*^9}, {3.9177703829742727`*^9, 
   3.9177703960238767`*^9}, {3.917770687301714*^9, 3.91777069050589*^9}, {
   3.9185475378069506`*^9, 3.91854755412877*^9}, {3.921300843130607*^9, 
   3.921300876646798*^9}, {3.92130091779666*^9, 3.9213009184803853`*^9}, {
   3.9213009698637075`*^9, 3.921300973463643*^9}, {3.9213037353783555`*^9, 
   3.9213037407219477`*^9}, 3.921558426371991*^9, {3.9215585591502295`*^9, 
   3.9215586196347613`*^9}, 3.921558670489656*^9, {3.921558714943802*^9, 
   3.9215587415589104`*^9}, {3.9215588356042943`*^9, 
   3.9215588788673353`*^9}, {3.9215589122843413`*^9, 3.9215589332417617`*^9}, 
   3.9222426594667253`*^9, {3.922242707848058*^9, 3.9222427351706123`*^9}, {
   3.9229396064605417`*^9, 3.9229396210217595`*^9}, {3.9229396855707293`*^9, 
   3.9229397451380444`*^9}, {3.92293979145691*^9, 3.92293983841004*^9}, {
   3.922941249195215*^9, 3.9229413043786745`*^9}, 3.922941338128374*^9, {
   3.9229413823157673`*^9, 3.9229413935181627`*^9}, 3.9229415004219112`*^9, {
   3.922941565251625*^9, 3.922941595707647*^9}, {3.9231407155663624`*^9, 
   3.92314077148755*^9}, {3.9231408280684195`*^9, 3.92314086950343*^9}, {
   3.9233568346282234`*^9, 3.9233568566572776`*^9}, {3.9233569306663017`*^9, 
   3.9233569358997774`*^9}, {3.9233571058219075`*^9, 3.923357116601841*^9}, {
   3.9233571894084463`*^9, 3.923357200112664*^9}, {3.9290719572013283`*^9, 
   3.929071999040642*^9}, {3.959057452208702*^9, 3.959057456834001*^9}, 
   3.9590574955646257`*^9, {3.959205386886331*^9, 3.959205391199705*^9}, 
   3.95920546777068*^9, {3.95920554135288*^9, 3.9592055416413803`*^9}, {
   3.959205596938348*^9, 3.9592056380805798`*^9}, {3.959206954190803*^9, 
   3.959206994941434*^9}, {3.9592070745340757`*^9, 3.959207078409655*^9}, {
   3.959207272878701*^9, 3.959207302844805*^9}, {3.959207584210374*^9, 
   3.959207588984023*^9}, {3.9592076717733393`*^9, 3.959207673154694*^9}, {
   3.95920782957854*^9, 3.959207850753293*^9}, {3.959207892995275*^9, 
   3.9592079639523478`*^9}, 3.959208021178677*^9, {3.9592081078031063`*^9, 
   3.959208115918755*^9}, {3.959208255534183*^9, 3.959208279748068*^9}, {
   3.959208816449553*^9, 3.9592088668041887`*^9}, {3.959209046115909*^9, 
   3.95920904718547*^9}, 3.959209506895007*^9, {3.959210889073429*^9, 
   3.959210889812854*^9}, {3.959320332101036*^9, 3.959320334919147*^9}, {
   3.959320718774715*^9, 3.959320726368264*^9}, {3.9593208474265003`*^9, 
   3.9593208478297663`*^9}, {3.959321953958706*^9, 3.9593219583220663`*^9}, {
   3.9593219975781593`*^9, 3.9593219983285513`*^9}, {3.959322176763905*^9, 
   3.959322186425983*^9}, {3.95932370088846*^9, 3.959323702451435*^9}, 
   3.959324582174481*^9, {3.959324653553362*^9, 3.959324654164723*^9}, {
   3.959644424699686*^9, 3.9596444694125013`*^9}, {3.9658093194268847`*^9, 
   3.965809331149393*^9}, {3.96580937319917*^9, 3.965809585818417*^9}, {
   3.965809773166634*^9, 3.9658098471700497`*^9}, {3.966473817058468*^9, 
   3.966473851670507*^9}, {3.966986634240918*^9, 
   3.966986693102054*^9}},ExpressionUUID->"a9cecb6b-405a-4a83-9952-\
22dad025ed47"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"modelBM", "[", 
     RowBox[{
      RowBox[{"\[Nu]_", "?", "NumberQ"}], ",", 
      RowBox[{"kAB_", "?", "NumberQ"}], ",", 
      RowBox[{"kBA_", "?", "NumberQ"}], ",", 
      RowBox[{"R20_", "?", "NumberQ"}], ",", 
      RowBox[{"csd_", "?", "NumberQ"}], ",", 
      RowBox[{"field_", "?", "NumberQ"}]}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "delta", ",", "ncp", ",", "tcp", ",", "domega", ",", "Alist", ",", 
        "eA", ",", "Astar", ",", "eAstar", ",", "matB", ",", "matC", ",", 
        "pB", ",", "M0", ",", "MT"}], "}"}], ",", 
      RowBox[{
       RowBox[{"delta", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"4", " ", "\[Nu]"}], ")"}], "^", 
         RowBox[{"-", "1"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"tcp", "=", "0.06"}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{
        "decided", " ", "based", " ", "on", " ", "experimental", " ", 
         "time"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ncp", "=", 
        RowBox[{"tcp", "*", "\[Nu]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"domega", "=", 
        RowBox[{"csd", "*", "2", "*", "\[Pi]", "*", "field"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Alist", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "R20"}], "-", "kAB"}], ",", "kBA"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"kAB", ",", 
            RowBox[{
             RowBox[{"-", "R20"}], "-", "kBA", "+", 
             RowBox[{"I", " ", "domega"}]}]}], "}"}]}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"eA", "=", 
        RowBox[{"MatrixExp", "[", 
         RowBox[{"N", "[", 
          RowBox[{"Alist", "*", "delta"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Astar", "=", 
        RowBox[{"Conjugate", "[", "Alist", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"eAstar", "=", 
        RowBox[{"MatrixExp", "[", 
         RowBox[{"N", "[", 
          RowBox[{"Astar", "*", "delta"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"matB", "=", 
        RowBox[{"Dot", "[", 
         RowBox[{
          RowBox[{"Dot", "[", 
           RowBox[{
            RowBox[{"Dot", "[", 
             RowBox[{"eA", ",", "eAstar"}], "]"}], ",", "eAstar"}], "]"}], 
          ",", "eA"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"matC", "=", 
        RowBox[{"MatrixPower", "[", 
         RowBox[{
          RowBox[{"N", "[", "matB", "]"}], ",", "ncp"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"pB", "=", 
        RowBox[{"kAB", "/", 
         RowBox[{"(", 
          RowBox[{"kAB", "+", "kBA"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"M0", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", "-", "pB"}], "}"}], ",", 
          RowBox[{"{", "pB", "}"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"MT", "=", 
        RowBox[{"Dot", "[", 
         RowBox[{"matC", ",", "M0"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Re", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "/", 
           RowBox[{"(", 
            RowBox[{"4", "*", "ncp", "*", "delta"}], ")"}]}], ")"}], "*", 
         RowBox[{"Log", "[", 
          RowBox[{
           RowBox[{"MT", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}], "/", 
           RowBox[{"M0", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "]"}]}], "]"}]}]}], " ", 
     RowBox[{"(*", 
      RowBox[{"For", " ", "slow", " ", "exchange"}], "*)"}], "]"}]}], ";"}], 
  "\n", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{
  3.9090513581081085`*^9, 3.909051399720561*^9, {3.9090514453551683`*^9, 
   3.909051479233103*^9}, {3.90905153363438*^9, 3.9090515514609003`*^9}, 
   3.9090515833892527`*^9, 3.9090516722960005`*^9, 3.909051741266244*^9, {
   3.9090518359355383`*^9, 3.9090518393597155`*^9}, {3.9090519185098333`*^9, 
   3.909051938396117*^9}, 3.9090520176423917`*^9, 3.909052086311014*^9, {
   3.9090522662383094`*^9, 3.909052353673297*^9}, {3.9090523997030697`*^9, 
   3.9090524104258537`*^9}, {3.9090524588943806`*^9, 3.90905248274641*^9}, 
   3.909462311560796*^9, {3.9658097395200377`*^9, 3.965809760929982*^9}, 
   3.965809911195112*^9},
 CellLabel->
  "In[201]:=",ExpressionUUID->"72574397-01f2-4b84-be20-62e2a0d54738"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"r2val800Table", "=", 
    RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Populate", " ", "the", " ", "tables", " ", "with", " ", "nu"}], 
    ",", "r2val800", ",", 
    RowBox[{"and", " ", "r2val600", " ", "values"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"replica", " ", "=", " ", 
      RowBox[{"rep", "[", 
       RowBox[{"[", "l", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "replica", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"csdx", " ", "=", " ", 
         RowBox[{"csdsim", "[", 
          RowBox[{"[", "k", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"pBx", " ", "=", " ", 
            RowBox[{"pBsim", "[", 
             RowBox[{"[", "j", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"kAB", "=", 
               RowBox[{
                RowBox[{"kexsim", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "*", 
                RowBox[{"(", 
                 RowBox[{"1", "-", "pBx"}], ")"}]}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"kBA", "=", 
               RowBox[{
                RowBox[{"kexsim", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "*", "pBx"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"prefac", "=", 
               RowBox[{"pBx", "*", 
                RowBox[{"(", 
                 RowBox[{"1", "-", "pBx"}], ")"}], "*", "4", "*", 
                RowBox[{"\[Pi]", "^", "2"}], "*", "csdx", "*", "csdx"}]}], 
              ";", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{"Print", "[", "prefac", "]"}], ";"}], "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"nuList", "=", 
               RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"r2val800List", "=", 
               RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"r2val600List", "=", 
               RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"Do", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"result800", "=", 
                  RowBox[{"modelBM", "[", 
                   RowBox[{"\[Nu]value", ",", "kBA", ",", "kAB", ",", 
                    RowBox[{"R20", "=", "R20800"}], ",", "csdx", ",", 
                    "field800"}], "]"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"resultv", "=", 
                  RowBox[{"modelBM", "[", 
                   RowBox[{"v", ",", "kBA", ",", "kAB", ",", 
                    RowBox[{"R20", "=", "R20800"}], ",", "csdx", ",", 
                    "field800"}], "]"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"err800sim2", "=", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"resultv", "-", "R20800"}], ")"}], "*", 
                   RowBox[{"5", "/", "100"}]}]}], ";", " ", 
                 RowBox[{"(*", 
                  RowBox[{"5", "%", " ", "error", " ", "of", " ", 
                   RowBox[{"(", 
                    RowBox[{"max", "-", "min"}], ")"}], " ", "introduced", 
                   " ", "for", " ", "800", " ", "dataset"}], "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"noise800", "=", 
                  RowBox[{"RandomVariate", "[", 
                   RowBox[{"NormalDistribution", "[", 
                    RowBox[{"0", ",", "err800sim2"}], "]"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"result600", "=", 
                  RowBox[{"modelBM", "[", 
                   RowBox[{"\[Nu]value", ",", "kBA", ",", "kAB", ",", 
                    RowBox[{"R20", "=", "R20600"}], ",", "csdx", ",", 
                    "field600"}], "]"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"resultv", "=", 
                  RowBox[{"modelBM", "[", 
                   RowBox[{"v", ",", "kBA", ",", "kAB", ",", 
                    RowBox[{"R20", "=", "R20600"}], ",", "csdx", ",", 
                    "field600"}], "]"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"err600sim2", "=", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"resultv", "-", "R20600"}], ")"}], "*", 
                   RowBox[{"5", "/", "100"}]}]}], ";", " ", 
                 RowBox[{"(*", 
                  RowBox[{"5", "%", " ", "error", " ", 
                   RowBox[{"(", 
                    RowBox[{"max", "-", "min"}], ")"}], " ", "introduced", 
                   " ", "for", " ", "600", " ", "dataset"}], "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"noise600", "=", 
                  RowBox[{"RandomVariate", "[", 
                   RowBox[{"NormalDistribution", "[", 
                    RowBox[{"0", ",", "err600sim2"}], "]"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"nuList", ",", "\[Nu]value"}], "]"}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"r2val800List", ",", 
                   RowBox[{"result800", "+", "noise800"}]}], "]"}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"r2val600List", ",", 
                   RowBox[{"result600", "+", "noise600"}]}], "]"}], ";"}], 
                ",", 
                RowBox[{"{", 
                 RowBox[{"\[Nu]value", ",", "\[Nu]"}], "}"}]}], "]"}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"r2val800Table", ",", 
                RowBox[{"<|", 
                 RowBox[{
                  RowBox[{"\"\<rep\>\"", "->", "replica"}], ",", 
                  RowBox[{"\"\<csdsim*10\>\"", "->", 
                   RowBox[{"10", "csdx"}]}], ",", 
                  RowBox[{"\"\<pBsim\>\"", "->", 
                   RowBox[{"100", "pBx"}]}], ",", 
                  RowBox[{"\"\<kexsim\>\"", "->", 
                   RowBox[{"kexsim", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], ",", 
                  RowBox[{"\"\<nu\>\"", "->", "nuList"}], ",", 
                  RowBox[{"\"\<r2val800\>\"", "->", "r2val800List"}], ",", 
                  RowBox[{"\"\<r2val600\>\"", "->", "r2val600List"}]}], 
                 "|>"}]}], "]"}], ";"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"Length", "[", "kexsim", "]"}]}], "}"}]}], "]"}]}], 
          ",", " ", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", 
            RowBox[{"Length", "[", "pBsim", "]"}]}], "}"}]}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"k", ",", 
         RowBox[{"Length", "[", "csdsim", "]"}]}], "}"}]}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"l", ",", "rep"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r2val600List", ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"currentDirectory", "=", 
    RowBox[{"NotebookDirectory", "[", "]"}]}], ";"}], "\n", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TableForm", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"r2val800Table", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "\"\<pBsim\>\""}], "]"}], "]"}], ",", 
        RowBox[{"r2val800Table", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "\"\<kexsim\>\""}], "]"}], "]"}], ",", 
        RowBox[{"r2val800Table", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "\"\<nu\>\""}], "]"}], "]"}], ",", 
        RowBox[{"r2val800Table", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "\"\<r2val800\>\""}], "]"}], "]"}], ",", 
        RowBox[{"r2val800Table", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "\"\<r2val600\>\""}], "]"}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"Length", "[", "r2val800Table", "]"}]}], "}"}]}], "]"}], ",", 
    RowBox[{"TableHeadings", "->", 
     RowBox[{"{", 
      RowBox[{"None", ",", 
       RowBox[{"{", 
        RowBox[{
        "\"\<kexsim\>\"", ",", "\"\<nu\>\"", ",", "\"\<r2val800\>\"", ",", 
         "\"\<r2val600\>\""}], "}"}]}], "}"}]}]}], "]"}], 
  ";"}], "\n"}], "Input",
 CellChangeTimes->{
  3.9090513581081085`*^9, 3.909051399720561*^9, {3.9090514453551683`*^9, 
   3.909051479233103*^9}, {3.90905153363438*^9, 3.9090515514609003`*^9}, 
   3.9090515833892527`*^9, 3.9090516722960005`*^9, 3.909051741266244*^9, {
   3.9090518359355383`*^9, 3.9090518393597155`*^9}, {3.9090519185098333`*^9, 
   3.909051938396117*^9}, 3.9090520176423917`*^9, 3.909052086311014*^9, {
   3.9090522662383094`*^9, 3.909052353673297*^9}, {3.9090523997030697`*^9, 
   3.9090524104258537`*^9}, {3.9090524588943806`*^9, 3.90905248274641*^9}, {
   3.909462311560796*^9, 3.9094623131538706`*^9}, {3.9094623718119965`*^9, 
   3.9094624295604205`*^9}, {3.909464168742465*^9, 3.9094641691646633`*^9}, {
   3.909551258223214*^9, 3.90955135879036*^9}, {3.9095514795233746`*^9, 
   3.909551481868601*^9}, {3.9095515819283104`*^9, 3.9095515835765753`*^9}, {
   3.9102349211747913`*^9, 3.9102349293162427`*^9}, {3.9102354184384537`*^9, 
   3.910235425396083*^9}, 3.910235805480497*^9, 3.9102361153562946`*^9, {
   3.9177695196871605`*^9, 3.917769580703063*^9}, {3.9177697313221216`*^9, 
   3.917769745695088*^9}, {3.917770334060094*^9, 3.917770373425706*^9}, {
   3.917770420573738*^9, 3.9177704678343697`*^9}, 3.917770512222491*^9, {
   3.9177707229651585`*^9, 3.917770766895887*^9}, {3.9177708084187565`*^9, 
   3.917770813517878*^9}, {3.9592066401088047`*^9, 3.959206643888184*^9}, {
   3.9592066801635027`*^9, 3.9592066827598*^9}, {3.959210787197651*^9, 
   3.9592108088714867`*^9}, {3.959320816616996*^9, 3.959320818870137*^9}, 
   3.9593213032909813`*^9, {3.96580960834783*^9, 3.965809682012266*^9}, {
   3.965809932414734*^9, 3.965809945071705*^9}},
 CellLabel->
  "In[202]:=",ExpressionUUID->"344fd62a-4e1a-4dec-b968-4925a6f31303"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partd", 
   "\"Part specification \\!\\(\\*RowBox[{\\\"1\\\", \\\"\[LeftDoubleBracket]\
\\\", \\\"1\\\", \\\"\[RightDoubleBracket]\\\"}]\\) is longer than depth of \
object.\"", 2, 203, 7, 26791541510843233577, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9658099544518642`*^9},
 CellLabel->
  "During evaluation of \
In[202]:=",ExpressionUUID->"313e9d84-2f92-4fb0-b1b2-1a3a422b28df"],

Cell[BoxData[
 RowBox[{"1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]], "Print",
 CellChangeTimes->{3.96580995445535*^9},
 CellLabel->
  "During evaluation of \
In[202]:=",ExpressionUUID->"2c31c6de-b423-43f8-8ac5-3a1445e0c68e"]
}, Open  ]],

Cell[BoxData["\n"], "Input",
 CellChangeTimes->{{3.9090524884189434`*^9, 3.909052499637267*^9}, {
   3.9090526853564205`*^9, 3.9090526891397314`*^9}, 3.909052722071598*^9, {
   3.909052789341323*^9, 3.909052809081995*^9}, 3.9090546775916452`*^9, 
   3.909055144059519*^9, {3.909055256688754*^9, 3.90905527327732*^9}, {
   3.909055379876252*^9, 3.909055380689264*^9}, {3.9090554358912745`*^9, 
   3.909055436642687*^9}, {3.909113882757346*^9, 3.9091138888987846`*^9}, {
   3.909117049744026*^9, 3.9091170729248624`*^9}, {3.9091206932105856`*^9, 
   3.909120696524861*^9}, {3.90912086413421*^9, 3.909120899587148*^9}, 
   3.9092068873323984`*^9, {3.9092792054763093`*^9, 3.9092792109474225`*^9}, {
   3.9092934612169476`*^9, 3.909293472422553*^9}, 3.909293795477928*^9, 
   3.909294169149516*^9, {3.9092943178391953`*^9, 3.9092943263560457`*^9}, 
   3.9092970262723036`*^9, {3.9094587249973173`*^9, 3.909458866534007*^9}, {
   3.9094588979726686`*^9, 3.909458911867657*^9}, {3.9094593673414345`*^9, 
   3.909459382331848*^9}, {3.9094594206405745`*^9, 3.9094594230153255`*^9}, {
   3.909459479514927*^9, 3.9094594805302997`*^9}, {3.9094595566354113`*^9, 
   3.9094595640761786`*^9}, {3.909459615542487*^9, 3.9094596235766125`*^9}, {
   3.909460254231446*^9, 3.909460266173089*^9}, 3.909460413194322*^9, 
   3.909460751563444*^9, {3.9094619671699357`*^9, 3.909462003103509*^9}, {
   3.9094625523910027`*^9, 3.9094625527206564`*^9}, {3.909462588283926*^9, 
   3.9094625993514047`*^9}, 3.9094638728360825`*^9},
 CellLabel->
  "In[207]:=",ExpressionUUID->"837134db-0a4f-408d-ae19-b94f79c7d0b8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
    "outputFolderPath", "=", 
     "\"\< /Users/apurvaphale/Desktop/Apurva/CPMG_simulations/eCPMG_\
simulations/data_generation_BM/HCPMG/100reps/linear/data/\>\""}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{"path", " ", "to", " ", "save", " ", "the", " ", "datasets"}], 
    "*)"}], 
   StyleBox["\[IndentingNewLine]",
    FontWeight->"Plain"], "\n", 
   RowBox[{
    RowBox[{"plots", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"ListLinePlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Tooltip", "[", 
            RowBox[{
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"r2val800Table", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<nu\>\"", "]"}], 
                ",", 
                RowBox[{
                 RowBox[{"r2val800Table", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<r2val800\>\"", 
                 "]"}]}], "}"}], "]"}], ",", 
             RowBox[{"StringForm", "[", 
              RowBox[{"\"\<kexsim = `` (800)\>\"", ",", 
               RowBox[{
                RowBox[{"r2val800Table", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<kexsim\>\"", 
                "]"}]}], "]"}]}], "]"}], ",", 
           RowBox[{"Tooltip", "[", 
            RowBox[{
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"r2val800Table", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<nu\>\"", "]"}], 
                ",", 
                RowBox[{
                 RowBox[{"r2val800Table", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<r2val600\>\"", 
                 "]"}]}], "}"}], "]"}], ",", 
             RowBox[{"StringForm", "[", 
              RowBox[{"\"\<kexsim = `` (600)\>\"", ",", 
               RowBox[{
                RowBox[{"r2val800Table", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<kexsim\>\"", 
                "]"}]}], "]"}]}], "]"}]}], "}"}], ",", 
         RowBox[{"PlotMarkers", "->", 
          RowBox[{"{", 
           RowBox[{"Automatic", ",", "Small"}], "}"}]}], ",", 
         RowBox[{"FrameLabel", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<nu\>\"", ",", "\"\<R2eff\>\""}], "}"}]}], ",", 
         RowBox[{"PlotRange", "->", "All"}], ",", 
         RowBox[{"Joined", "->", "True"}], ",", 
         RowBox[{"ImageSize", "->", "Large"}], ",", 
         RowBox[{"PlotLabel", "->", 
          RowBox[{"StringForm", "[", "      ", 
           RowBox[{"\"\<rep = ``, kex = `` (800), pB% = ``\>\"", ",", 
            RowBox[{
             RowBox[{"r2val800Table", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<rep\>\"", "]"}], ",", 
            RowBox[{
             RowBox[{"r2val800Table", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<kexsim\>\"", "]"}], 
            ",", 
            RowBox[{
             RowBox[{"r2val800Table", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<pBsim\>\"", "]"}]}], 
           "]"}]}], ",", 
         RowBox[{"PlotLegends", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<R2val800\>\"", ",", "\"\<R2val600\>\""}], "}"}]}]}], 
        "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "r2val800Table", "]"}]}], "}"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"dataset", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"r2val800Table", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<nu\>\"", "]"}], ",", 
          RowBox[{
           RowBox[{"r2val800Table", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<r2val800\>\"", "]"}], 
          ",", 
          RowBox[{
           RowBox[{"r2val800Table", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<r2val600\>\"", "]"}]}], 
         "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"kexValue", "=", 
       RowBox[{"IntegerString", "[", 
        RowBox[{
         RowBox[{"Round", "[", 
          RowBox[{
           RowBox[{"r2val800Table", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<kexsim\>\"", "]"}], 
          "]"}], ",", "10", ",", "6"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"pBValue", "=", 
       RowBox[{"IntegerString", "[", 
        RowBox[{
         RowBox[{"Round", "[", 
          RowBox[{
           RowBox[{"r2val800Table", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<pBsim\>\"", "]"}], 
          "]"}], ",", "10", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"csdValue", "=", 
       RowBox[{"IntegerString", "[", 
        RowBox[{
         RowBox[{"Round", "[", 
          RowBox[{
           RowBox[{"r2val800Table", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<csdsim*10\>\"", "]"}], 
          "]"}], ",", "10", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"replica", "=", 
       RowBox[{"ToString", "[", 
        RowBox[{
         RowBox[{"r2val800Table", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<rep\>\"", "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"subfolder", "=", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{"currentDirectory", ",", "replica"}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"DirectoryQ", "[", "subfolder", "]"}]}], ",", 
        RowBox[{"CreateDirectory", "[", "subfolder", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"outputFileName", "=", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{"subfolder", ",", 
          RowBox[{"StringJoin", "[", 
           RowBox[{
           "\"\<csd+\>\"", ",", "csdValue", ",", "\"\<+kex+\>\"", ",", 
            "kexValue", ",", "\"\<+pB+\>\"", ",", "pBValue", ",", 
            "\"\<+fromBM.csv\>\""}], "]"}]}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{"outputFileName", ",", "dataset", ",", "\"\<CSV\>\""}], "]"}], 
      ";"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "r2val800Table", "]"}]}], "}"}]}], "]"}], "\n", 
   "\n", "\[IndentingNewLine]", "\n", 
   RowBox[{"Column", "[", "plots", "]"}], "\[IndentingNewLine]", 
   RowBox[{"Keys", "[", 
    RowBox[{"r2val800Table", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}], "\n", 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.909052978572219*^9, 3.909052985888858*^9}, 
   3.9090530358304863`*^9, {3.9090530903048944`*^9, 3.909053098697693*^9}, 
   3.909053252696472*^9, 3.9090533233987093`*^9, {3.9090534386836567`*^9, 
   3.909053447170697*^9}, {3.909053502038466*^9, 3.909053515570574*^9}, {
   3.9090536239558296`*^9, 3.909053643978307*^9}, 3.909054056761688*^9, {
   3.9090540972831326`*^9, 3.909054107723653*^9}, {3.909054728675042*^9, 
   3.90905473337776*^9}, {3.9090547924000893`*^9, 3.9090548195119233`*^9}, {
   3.90905485740186*^9, 3.9090548630121164`*^9}, {3.909054893724863*^9, 
   3.9090549446444225`*^9}, {3.909055070011979*^9, 3.909055072715083*^9}, 
   3.909056383607827*^9, {3.9091208525866966`*^9, 3.909120857867789*^9}, {
   3.9092172617271852`*^9, 3.909217264447239*^9}, {3.9094599841080914`*^9, 
   3.9094600858069544`*^9}, {3.909460117568059*^9, 3.909460169926253*^9}, {
   3.909460228848915*^9, 3.9094602441544476`*^9}, {3.90946039992321*^9, 
   3.909460401877315*^9}, {3.9094604422930593`*^9, 3.9094604576415386`*^9}, {
   3.909460519921236*^9, 3.909460548913039*^9}, {3.909460668406663*^9, 
   3.909460674393694*^9}, 3.9094607264334307`*^9, {3.9094621304819403`*^9, 
   3.9094621788397274`*^9}, 3.9094625191949883`*^9, 3.9094625675568514`*^9, 
   3.909462612447996*^9, 3.9094626768593407`*^9, 3.9094627364451427`*^9, 
   3.9094627916634893`*^9, 3.9094628535134234`*^9, {3.9094629519414525`*^9, 
   3.9094629911210775`*^9}, 3.9094630886885767`*^9, {3.90946314032408*^9, 
   3.909463150203247*^9}, {3.9094639315804453`*^9, 3.9094639862368836`*^9}, {
   3.909464043184828*^9, 3.909464046810464*^9}, {3.9094641306841936`*^9, 
   3.909464133606538*^9}, {3.9094641886248393`*^9, 3.9094642080811043`*^9}, {
   3.9094646233327436`*^9, 3.9094646348354483`*^9}, {3.9094810358314223`*^9, 
   3.909481044348381*^9}, 3.9095511795817633`*^9, 3.9095516259290133`*^9, {
   3.909551696035442*^9, 3.909551764617977*^9}, {3.909551918623921*^9, 
   3.9095519191577024`*^9}, {3.909552438095625*^9, 3.9095524407987924`*^9}, {
   3.9102358420218415`*^9, 3.910235871347548*^9}, {3.917769644004538*^9, 
   3.91776966584785*^9}, 3.91854754504926*^9, {3.9185477710279975`*^9, 
   3.9185477768119864`*^9}, {3.921558476336396*^9, 3.921558497738693*^9}, 
   3.921558630200742*^9, {3.9215587076294193`*^9, 3.921558709583603*^9}, {
   3.921558749076439*^9, 3.921558749404235*^9}, {3.921558907517902*^9, 
   3.9215589077990074`*^9}, {3.9215589428562117`*^9, 
   3.9215589439494424`*^9}, {3.922939640803831*^9, 3.9229396441316214`*^9}, 
   3.9231407898782473`*^9, {3.9233568660948315`*^9, 3.923356870249033*^9}, 
   3.9233569485226746`*^9, {3.92335703281279*^9, 3.9233570434748588`*^9}, 
   3.923357086712057*^9, {3.923357134493283*^9, 3.9233571706562967`*^9}, {
   3.9233572212691145`*^9, 3.9233572447896*^9}, 3.9233572883238463`*^9, {
   3.9290720424815817`*^9, 3.9290720890567236`*^9}, {3.9592053190109386`*^9, 
   3.959205341926013*^9}, {3.95920548702625*^9, 3.95920549133036*^9}, 
   3.9592070048664103`*^9, {3.959207437467702*^9, 3.959207453505282*^9}, 
   3.9592093401863327`*^9, 3.959209778960721*^9, {3.9592098386444683`*^9, 
   3.959209843053431*^9}, {3.959209892315043*^9, 3.959209924270537*^9}, {
   3.95921050743935*^9, 3.9592105178414993`*^9}, {3.959210639281636*^9, 
   3.9592106411764174`*^9}, {3.9592106723819647`*^9, 3.959210702328898*^9}, {
   3.959210833477983*^9, 3.959210872017952*^9}, {3.959320669993457*^9, 
   3.959320676954507*^9}, 3.95932093610914*^9, {3.959320971992972*^9, 
   3.9593209860705433`*^9}, 3.959321019334516*^9, {3.959321097604967*^9, 
   3.959321121089025*^9}, {3.959321520655984*^9, 3.959321533390609*^9}, 
   3.959321611603352*^9, {3.959321648691119*^9, 3.959321649209594*^9}, 
   3.959321718344769*^9, {3.9593218598966417`*^9, 3.959321862329831*^9}, {
   3.959321922643067*^9, 3.9593219246407423`*^9}, {3.9593223138576813`*^9, 
   3.959322316156433*^9}, {3.959323715703932*^9, 3.959323771210639*^9}, {
   3.959324692042247*^9, 3.959324694531602*^9}, {3.9596444904825087`*^9, 
   3.9596445028033953`*^9}, 3.9658093457042217`*^9, {3.965809711960505*^9, 
   3.965809726317848*^9}, 3.965809868676141*^9, {3.965809969605377*^9, 
   3.965809974611765*^9}},ExpressionUUID->"284a78c3-5040-4c35-b79b-\
7a69e974b4d4"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       GraphicsBox[{{}, {{{}, {}, 
           TagBox[
            TagBox[
             TooltipBox[{
               Hue[0.67, 0.6, 0.6], 
               Directive[
                PointSize[
                 NCache[
                  Rational[1, 60], 0.016666666666666666`]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]], 
               LineBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQDQGRDoz5xspGMl4OYK5DvcPOFakHwpU8oPx+h+dV
M+Y3irtC+fMdmJrffcwrcITwC5Y7XLffH/D/tx1Ufr2DZoH421JGWwi/Y7PD
+0tbdigzWELVb3cIFeF797XPCsKP2O2gO6Ow5/ZzqLzDfoegHZHSMdMtIPwp
Bx1WKtRYLrCzhpp32KGzSubEvxNQ+ZqjDkIcOq6vPkHNKzjuwNXXLJR/C2pe
ykmHDQlJfVf5oPojTjtYLomu9PoKVe9z1qEj+Dj/pEgo3+G8g2mfw/EwRqj+
WRccfI588V9UBuVPuehQYrXBOSbdDMLvu+QQltISwRkJdU/HZYcXLy7nbmKF
qm+64qCz5PjW3FqYe686lIumlfyohMqXXXM4aeOV7N9gA3X/dYe0S+xd/qlQ
9Vk3HL6/cvuatQfKT7npkCu+xIU1AureuFsOE9f1ebzSg8pH3HaYyCfoHJ4K
lQ+641C4r3XxXFWofT53HbQubedITrFxAADsDpd7
                "]]}, 
              InterpretationBox[
              "\"kexsim = \\!\\(\\*RowBox[{\\\"10000\\\"}]\\) (800)\"", 
               StringForm["kexsim = `` (800)", 10000], Editable -> False]], 
             Annotation[#, 
              StringForm["kexsim = `` (800)", 10000], "Tooltip"]& ], 
            Annotation[#, "Charting`Private`Tag#1"]& ], 
           TagBox[
            TagBox[
             TooltipBox[{
               Hue[0.9060679774997897, 0.6, 0.6], 
               Directive[
                PointSize[
                 NCache[
                  Rational[1, 60], 0.016666666666666666`]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               LineBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQDQGRDuFLpnw0FHVyAHMd6h0c/aedX2LhAOX3O6Rl
981lnGYP5c93cGtbM61A0hLCL1jucCODo+V+lBlUfr3DxMv8naE/jCH8js0O
C5SYLdt3m0DVb3eIt2bM64fxI3Y7cH0PXhmXC+U77Hc4rPxic0SSKYQ/5aDD
95OlTQcuQfkdhx1M7A4Yd9dB1dccdQit/yUjxQCVLzju8Kf0sZ9yBFQ+5aRD
dcyjVs5dUPdEnHbQmVnQ9e0GlO9z1sGua73T5mNGUPvPO0ySmpWz/BJU/6wL
Ds53DnYbiULVT7noMD8kX4JXCirfd8nB9EeVv9xMKL/jsoO9peeVBdlQftMV
hwJv9XbWb1D9NVcd5Bv36ftWQOXLrjloZmj5zbwPtb/guoPBmbbVEYZQ+awb
DrnMpzPdy2H+uekQtSY8fM51KD/ulsN9ljKmVFaY/247TD90VEVqEtS8oDsO
yy8XV588BfPvXYft4ubmn78aOwAAh0mWlA==
                "]]}, 
              InterpretationBox[
              "\"kexsim = \\!\\(\\*RowBox[{\\\"10000\\\"}]\\) (600)\"", 
               StringForm["kexsim = `` (600)", 10000], Editable -> False]], 
             Annotation[#, 
              StringForm["kexsim = `` (600)", 10000], "Tooltip"]& ], 
            Annotation[#, "Charting`Private`Tag#2"]& ]}, {
           TagBox[
            TagBox[
             TooltipBox[{
               Directive[
                PointSize[
                 NCache[
                  Rational[1, 60], 0.016666666666666666`]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]], 
               GeometricTransformationBox[
                InsetBox[
                 BoxData[
                  FormBox[
                   StyleBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}, PlotRangePadding -> Scaled[0.15]], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[
                    Rational[1, 60]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, StripOnInput -> False], 
                   TraditionalForm]], {0., 0.}, Automatic, 
                 Offset[7]], CompressedData["
1:eJxTTMoPSmVmYGBQAGJGIGZigIFIB8Z8Y2UjGS8HMNeh3mHnitQD4UoeUH6/
w/OqGfMbxV2h/PkOTM3vPuYVOEL4BcsdrtvvD/j/2w4qv95Bs0D8bSmjLYTf
sdnh/aUtO5QZLKHqtzuEivC9+9pnBeFH7HbQnVHYc/s5VN5hv0PQjkjpmOkW
EP6Ugw4rFWosF9hZQ8077NBZJXPi3wmofM1RByEOHddXn6DmFRx34OprFsq/
BTUv5aTDhoSkvqt8UP0Rpx0sl0RXen2Fqvc569ARfJx/UiSU73DewbTP4XgY
I1T/rAsOPke++C8qg/KnXHQosdrgHJNuBuH3XXIIS2mJ4IyEuqfjssOLF5dz
N7FC1TddcdBZcnxrbi3MvVcdykXTSn5UQuXLrjmctPFK9m+wgbr/ukPaJfYu
/1So+qwbDt9fuX3N2gPlp9x0yBVf4sIaAXVv3C2Hiev6PF7pQeUjbjtM5BN0
Dk+FygfdcSjc17p4rirUPp+7DlqXtnMkp9g4AAD3Vpd9
                "]]}, 
              InterpretationBox[
              "\"kexsim = \\!\\(\\*RowBox[{\\\"10000\\\"}]\\) (800)\"", 
               StringForm["kexsim = `` (800)", 10000], Editable -> False]], 
             Annotation[#, 
              StringForm["kexsim = `` (800)", 10000], "Tooltip"]& ], 
            Annotation[#, "Charting`Private`Tag#1"]& ], 
           TagBox[
            TagBox[
             TooltipBox[{
               Directive[
                PointSize[
                 NCache[
                  Rational[1, 60], 0.016666666666666666`]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               GeometricTransformationBox[
                InsetBox[
                 BoxData[
                  FormBox[
                   StyleBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    PolygonBox[{{-1, -1}, {1, -1}, {1, 1}, {-1, 1}}]}, 
                    PlotRangePadding -> Scaled[0.15]], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[
                    Rational[1, 60]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]]}, StripOnInput -> False], 
                   TraditionalForm]], {0., 0.}, Automatic, 
                 Offset[7]], CompressedData["
1:eJxTTMoPSmVmYGBQAGJGIGZigIFIh/AlUz4aijo5gLkO9Q6O/tPOL7FwgPL7
HdKy++YyTrOH8uc7uLWtmVYgaQnhFyx3uJHB0XI/ygwqv95h4mX+ztAfxhB+
x2aHBUrMlu27TaDqtzvEWzPm9cP4EbsduL4Hr4zLhfId9jscVn6xOSLJFMKf
ctDh+8nSpgOXoPyOww4mdgeMu+ug6muOOoTW/5KRYoDKFxx3+FP62E85Aiqf
ctKhOuZRK+cuqHsiTjvozCzo+nYDyvc562DXtd5p8zEjqP3nHSZJzcpZfgmq
f9YFB+c7B7uNRKHqp1x0mB+SL8ErBZXvu+Rg+qPKX24mlN9x2cHe0vPKgmwo
v+mKQ4G3ejvrN6j+mqsO8o379H0roPJl1xw0M7T8Zt6H2l9w3cHgTNvqCEOo
fNYNh1zm05nu5TD/3HSIWhMePuc6lB93y+E+SxlTKivMf7cdph86qiI1CWpe
0B2H5ZeLq0+egvn3rsN2cXPzz1+NHQCSkZaW
                "]]}, 
              InterpretationBox[
              "\"kexsim = \\!\\(\\*RowBox[{\\\"10000\\\"}]\\) (600)\"", 
               StringForm["kexsim = `` (600)", 10000], Editable -> False]], 
             Annotation[#, 
              StringForm["kexsim = `` (600)", 10000], "Tooltip"]& ], 
            Annotation[#, "Charting`Private`Tag#2"]& ]}}, {{}, {}}}, {
        DisplayFunction -> Identity, DisplayFunction -> Identity, 
         DisplayFunction -> Identity, AspectRatio -> 
         NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
         AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
         Identity, Frame -> {{False, False}, {False, False}}, FrameLabel -> {{
            FormBox[
             TagBox["\"R2eff\"", HoldForm], TraditionalForm], None}, {
            FormBox[
             TagBox["\"nu\"", HoldForm], TraditionalForm], None}}, 
         FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
         GridLines -> {None, None}, GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]], ImageSize -> Large, 
         Method -> {
          "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
           "DefaultGraphicsInteraction" -> {
            "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
             "Effects" -> {
              "Highlight" -> {"ratio" -> 2}, 
               "HighlightPoint" -> {"ratio" -> 2}, 
               "Droplines" -> {
                "freeformCursorMode" -> True, 
                 "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
           "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
             Directive[
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.880722, 0.611041, 0.142051], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.560181, 0.691569, 0.194885], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.922526, 0.385626, 0.209179], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.528488, 0.470624, 0.701351], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.772079, 0.431554, 0.102387], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.363898, 0.618501, 0.782349], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[1, 0.75, 0], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.647624, 0.37816, 0.614037], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.571589, 0.586483, 0.], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.915, 0.3325, 0.2125], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[
              0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
              AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
           "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
           "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> 
           Automatic, "OptimizePlotMarkers" -> True, 
           "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), "CopiedValueFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& )}}, PlotLabel -> FormBox[
           InterpretationBox[
           "\"rep = \\!\\(\\*FormBox[RowBox[{\\\"1\\\", \\\"\
\[LeftDoubleBracket]\\\", \\\"1\\\", \\\"\[RightDoubleBracket]\\\"}], \
TraditionalForm]\\), kex = \\!\\(\\*FormBox[\\\"10000\\\", \
TraditionalForm]\\) (800), pB% = \\!\\(\\*FormBox[\\\"5.`\\\", \
TraditionalForm]\\)\"", 
            StringForm["rep = ``, kex = `` (800), pB% = ``", 
             Part[1, 1], 10000, 5.], Editable -> False], TraditionalForm], 
         PlotRange -> {{0, 30000.}, {0, 52.220280075182025`}}, 
         PlotRangeClipping -> True, PlotRangePadding -> {{
            Scaled[0.02], 
            Scaled[0.02]}, {
            Scaled[0.02], 
            Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
       FormBox[
        FormBox[
         TemplateBox[{"\"R2val800\"", "\"R2val600\""}, "LineLegend", 
          DisplayFunction -> (FormBox[
            StyleBox[
             StyleBox[
              PaneBox[
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {
                    InsetBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}, {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, PlotRangePadding -> 
                    Scaled[0.15]}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {
                    InsetBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    PolygonBox[{{-1, -1}, {1, -1}, {1, 1}, {-1, 1}}]}, {
                    DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]]}, PlotRangePadding -> 
                    Scaled[0.15]}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                "Grid"], Alignment -> Left, AppearanceElements -> None, 
               ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
               "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
             FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
             False], TraditionalForm]& ), 
          InterpretationFunction :> (RowBox[{"LineLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "60"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "60"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}], ",", 
               RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}, PlotRangePadding -> Scaled[0.15]], ",", 
                    RowBox[{"Offset", "[", "7", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    GraphicsBox[{
                    EdgeForm[], 
                    PolygonBox[{{-1, -1}, {1, -1}, {1, 1}, {-1, 1}}]}, 
                    PlotRangePadding -> Scaled[0.15]], ",", 
                    RowBox[{"Offset", "[", "7", "]"}]}], "}"}]}], "}"}]}], 
               ",", 
               RowBox[{"Joined", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"True", ",", "True"}], "}"}]}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
          Editable -> True], TraditionalForm], TraditionalForm]},
      "Legended",
      DisplayFunction->(GridBox[{{
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"], 
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, GridBoxItemSize -> Automatic, 
        BaselinePosition -> {1, 1}]& ),
      Editable->True,
      InterpretationFunction->(RowBox[{"Legended", "[", 
         RowBox[{#, ",", 
           RowBox[{"Placed", "[", 
             RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.965809954489992*^9},
 CellLabel->
  "Out[210]=",ExpressionUUID->"bc028ddf-3b11-4afd-b8af-e6a70b13a063"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"rep\"\>", ",", "\<\"csdsim*10\"\>", ",", "\<\"pBsim\"\>", 
   ",", "\<\"kexsim\"\>", ",", "\<\"nu\"\>", ",", "\<\"r2val800\"\>", 
   ",", "\<\"r2val600\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.9658099544940147`*^9},
 CellLabel->
  "Out[211]=",ExpressionUUID->"d983d383-7ead-4d5e-aee4-d89a6a77b82e"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9102354456413794`*^9, 3.910235448967758*^9}},
 CellLabel->
  "In[212]:=",ExpressionUUID->"587a9f15-5769-4c78-9334-00d1f436eb5a"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.9090549957569313`*^9, 3.909055109543131*^9, {3.9094628656757793`*^9, 
   3.90946292538634*^9}, {3.909463002563069*^9, 3.90946303652087*^9}, {
   3.9094645651609154`*^9, 3.909464565520445*^9}},
 CellLabel->
  "In[213]:=",ExpressionUUID->"427c12ed-63d4-48cc-b8b1-52a72b28be4a"],

Cell[BoxData[
 RowBox[{"\n", "\n"}]], "Input",
 CellChangeTimes->{
  3.909053750020666*^9, {3.9090538156535015`*^9, 3.909053830408437*^9}, 
   3.909053901891416*^9, {3.909053936637561*^9, 3.9090540426319447`*^9}, 
   3.909054127210496*^9, {3.9090550836110344`*^9, 3.909055102113732*^9}, 
   3.909056388438185*^9, {3.9090564528470526`*^9, 3.9090564541748114`*^9}, 
   3.909113933490157*^9, {3.9091208377184234`*^9, 3.909120847739957*^9}, {
   3.9092173372412186`*^9, 3.9092173410146103`*^9}, {3.909217374593066*^9, 
   3.909217444506316*^9}, 3.9092176875607166`*^9, 3.909217813594002*^9, 
   3.909217908136809*^9, {3.9092937291100955`*^9, 3.909293778266452*^9}, {
   3.9092938231137667`*^9, 3.909293824832838*^9}, 3.909293870852635*^9, {
   3.909294869208501*^9, 3.909294892434882*^9}, 3.90932421560535*^9, {
   3.9093261064852505`*^9, 3.9093261068624787`*^9}, 3.909454210807514*^9, 
   3.909462616010785*^9, 3.9094627698330603`*^9, 3.9094645769456854`*^9},
 CellLabel->
  "In[214]:=",ExpressionUUID->"411f1451-df07-43dc-b524-537575e23a14"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9090564053955746`*^9, 3.9090564256188464`*^9}, {
   3.9090564670371246`*^9, 3.9090564804769335`*^9}, {3.909113785823947*^9, 
   3.9091137875599804`*^9}, 3.909122245983709*^9, 3.909205644029041*^9, {
   3.909206727370212*^9, 3.9092067518774056`*^9}, {3.9092068078452363`*^9, 
   3.9092068794720163`*^9}, {3.9092070054671354`*^9, 3.909207075267497*^9}, {
   3.9092071377867317`*^9, 3.9092071528401775`*^9}, {3.9092072006358643`*^9, 
   3.909207211735879*^9}, {3.9092072589208465`*^9, 3.90920729225105*^9}, {
   3.9092076602841377`*^9, 3.90920766899199*^9}},
 CellLabel->
  "In[215]:=",ExpressionUUID->"9aac4f0b-b493-4da9-b264-5613b7a633cc"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.909116971394837*^9, 3.9091170184996033`*^9}, 
   3.909117112678117*^9, {3.9091171533435607`*^9, 3.909117180735957*^9}, {
   3.9091172107704687`*^9, 3.9091172258534503`*^9}, {3.9091172651139684`*^9, 
   3.9091172767420764`*^9}, {3.909117315047694*^9, 3.909117445498487*^9}, {
   3.9091174946672087`*^9, 3.9091175612191167`*^9}, {3.909117691771864*^9, 
   3.9091177291710663`*^9}, {3.9091180654314284`*^9, 3.909118087178368*^9}, 
   3.909118155176104*^9, {3.9091183910454974`*^9, 3.909118418868688*^9}, {
   3.909118471177923*^9, 3.9091184896754208`*^9}, {3.909118632938512*^9, 
   3.909118694133272*^9}, {3.909118876602337*^9, 3.9091189005390635`*^9}, {
   3.9091191369227366`*^9, 3.9091191555722017`*^9}, {3.909119353430211*^9, 
   3.909119362633323*^9}, {3.909119415649885*^9, 3.909119448831625*^9}, {
   3.9091194790712347`*^9, 3.909119493592312*^9}, {3.9091206266720967`*^9, 
   3.9091206493821845`*^9}, {3.909120755290908*^9, 3.9091207704659157`*^9}, {
   3.909121017269086*^9, 3.909121041133996*^9}, {3.909121135983432*^9, 
   3.9091211439838824`*^9}, {3.9091212442208157`*^9, 3.909121268115142*^9}, {
   3.9091213064918957`*^9, 3.9091214916694145`*^9}, {3.909121691926017*^9, 
   3.909121716116965*^9}, {3.9091217584869328`*^9, 3.9091217892126665`*^9}, {
   3.9091218508736725`*^9, 3.9091218711350822`*^9}, {3.9091219704795237`*^9, 
   3.909121992531961*^9}, {3.9091222194122915`*^9, 3.9091222355111613`*^9}, 
   3.909122337056394*^9, {3.909122487877822*^9, 3.909122493052133*^9}, 
   3.9091284919495335`*^9, {3.90912855104436*^9, 3.909128558925233*^9}, {
   3.9091285907829275`*^9, 3.9091285911110115`*^9}, {3.909129455259838*^9, 
   3.909129555844118*^9}, {3.9091300144837675`*^9, 3.909130090483796*^9}, {
   3.9091301272311063`*^9, 3.909130167068406*^9}, {3.9091304935619*^9, 
   3.909130553766401*^9}, 3.9091306262380733`*^9, {3.9091307157353244`*^9, 
   3.909130779350672*^9}, {3.9091309382258277`*^9, 3.909130949591226*^9}, {
   3.9091310196824136`*^9, 3.909131155382966*^9}, {3.909131187087203*^9, 
   3.90913122367865*^9}, {3.909131274806831*^9, 3.9091313767960453`*^9}, {
   3.909131411277664*^9, 3.9091315070870385`*^9}, {3.909131579048333*^9, 
   3.909131597663492*^9}, {3.90913165847491*^9, 3.909131673181571*^9}, {
   3.9091317064206867`*^9, 3.9091317106275415`*^9}, {3.9091336032301054`*^9, 
   3.909133619861663*^9}, {3.90913365788525*^9, 3.9091336795171733`*^9}, {
   3.909202410918929*^9, 3.9092024654385643`*^9}, {3.909202497451875*^9, 
   3.909202521790104*^9}, 3.909202787100078*^9, 3.909202925145636*^9, 
   3.9092056375447044`*^9, {3.9092072243389015`*^9, 3.909207227582359*^9}, {
   3.909207303819409*^9, 3.9092073225847244`*^9}, {3.909207388642439*^9, 
   3.9092073926255264`*^9}, {3.9092074293948517`*^9, 
   3.9092074820469265`*^9}, {3.9092075594606023`*^9, 3.909207567952382*^9}, 
   3.9092076097194705`*^9, {3.9092076446892385`*^9, 3.909207673314639*^9}, 
   3.9092791529148417`*^9, 3.9092941129490047`*^9, 3.909464579727725*^9},
 CellLabel->
  "In[216]:=",ExpressionUUID->"0182facb-0fab-4b08-b9be-897707a90bf9"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.909207616003791*^9, 3.909207654517723*^9},
 CellLabel->
  "In[217]:=",ExpressionUUID->"a0246426-078d-495c-88c4-d14c72ae1f29"],

Cell[BoxData["\n"], "Input",
 CellChangeTimes->{3.909122058181881*^9, 3.909122098849105*^9, 
  3.9091222243666787`*^9},
 CellLabel->
  "In[218]:=",ExpressionUUID->"fc26013c-80ec-477b-90fe-a2d9798ce076"]
},
WindowSize->{Full, Full},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
FrontEndVersion->"13.3 for Mac OS X ARM (64-bit) (July 24, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"b17f4208-9eb4-4e05-a500-3245215bb71a"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 2139, 30, 30, "Input",ExpressionUUID->"ccb65b70-b61e-4455-8d0a-d89759e5eb1d"],
Cell[2700, 52, 16997, 331, 1438, "Input",ExpressionUUID->"a9cecb6b-405a-4a83-9952-22dad025ed47"],
Cell[19700, 385, 4620, 116, 367, "Input",ExpressionUUID->"72574397-01f2-4b84-be20-62e2a0d54738"],
Cell[CellGroupData[{
Cell[24345, 505, 10509, 223, 766, "Input",ExpressionUUID->"344fd62a-4e1a-4dec-b968-4925a6f31303"],
Cell[34857, 730, 451, 10, 28, "Message",ExpressionUUID->"313e9d84-2f92-4fb0-b1b2-1a3a422b28df"],
Cell[35311, 742, 240, 5, 24, "Print",ExpressionUUID->"2c31c6de-b423-43f8-8ac5-3a1445e0c68e"]
}, Open  ]],
Cell[35566, 750, 1587, 22, 52, "Input",ExpressionUUID->"837134db-0a4f-408d-ae19-b94f79c7d0b8"],
Cell[CellGroupData[{
Cell[37178, 776, 11131, 229, 577, "Input",ExpressionUUID->"284a78c3-5040-4c35-b79b-7a69e974b4d4"],
Cell[48312, 1007, 19226, 424, 395, "Output",ExpressionUUID->"bc028ddf-3b11-4afd-b8af-e6a70b13a063"],
Cell[67541, 1433, 348, 7, 34, "Output",ExpressionUUID->"d983d383-7ead-4d5e-aee4-d89a6a77b82e"]
}, Open  ]],
Cell[67904, 1443, 177, 3, 30, "Input",ExpressionUUID->"587a9f15-5769-4c78-9334-00d1f436eb5a"],
Cell[68084, 1448, 326, 6, 30, "Input",ExpressionUUID->"427c12ed-63d4-48cc-b8b1-52a72b28be4a"],
Cell[68413, 1456, 1039, 16, 73, "Input",ExpressionUUID->"411f1451-df07-43dc-b524-537575e23a14"],
Cell[69455, 1474, 687, 10, 30, "Input",ExpressionUUID->"9aac4f0b-b493-4da9-b264-5613b7a633cc"],
Cell[70145, 1486, 3095, 42, 30, "Input",ExpressionUUID->"0182facb-0fab-4b08-b9be-897707a90bf9"],
Cell[73243, 1530, 173, 3, 30, "Input",ExpressionUUID->"a0246426-078d-495c-88c4-d14c72ae1f29"],
Cell[73419, 1535, 202, 4, 52, "Input",ExpressionUUID->"fc26013c-80ec-477b-90fe-a2d9798ce076"]
}
]
*)

